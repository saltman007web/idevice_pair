name: Build & Notarize macOS Universal DMG

on:
  push:

env:
  APP_NAME: iDevicePair
  BINARY_NAME: iDevicePair
  # e.g. 1.2.3 from tag “v1.2.3”
  VERSION: ${{ github.ref_name }}
  # Path in your repo to the .icns you want bundled
  ICON_PATH: assets/iDevicePair.icns
  # Your app’s reverse-DNS identifier
  BUNDLE_ID: com.yourcompany.iDevicePair

jobs:
  macos-universal:
    name: Build macOS slices
    runs-on: macos-latest
    strategy:
      matrix:
        include:
          - arch: x86_64
            target: x86_64-apple-darwin
          - arch: arm64
            target: aarch64-apple-darwin

    steps:
      - uses: actions/checkout@v3

      - name: Set up Rust for ${{ matrix.arch }}
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: rustfmt, clippy
          target: ${{ matrix.target }}

      - name: Build ${{ matrix.arch }} slice
        run: |
          cargo build --release \
            --bin ${{ env.BINARY_NAME }} \
            --target ${{ matrix.target }}

      - name: Upload slice ${{ matrix.arch }}
        uses: actions/upload-artifact@v4
        with:
          name: slice-${{ matrix.arch }}
          path: target/${{ matrix.target }}/release/${{ env.BINARY_NAME }}

  macos-bundle:
    name: Create, Sign, Notarize & Upload Universal DMG
    needs: macos-universal
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3

      # 1. Download both architectures
      - name: Download x86_64 slice
        uses: actions/download-artifact@v4
        with:
          name: slice-x86_64
          path: slice-x86_64

      - name: Download arm64 slice
        uses: actions/download-artifact@v4
        with:
          name: slice-arm64
          path: slice-arm64

      # 2. Import your Developer ID cert
      - name: Import Developer ID certificate
        uses: apple-actions/import-codesign-certs@v5
        with:
          p12-file-base64: ${{ secrets.DEV_ID_P12_BASE64 }}
          p12-password:    ${{ secrets.DEV_ID_P12_PASSWORD }}

      # 3. Build the .app bundle
      - name: Build Universal .app Bundle
        run: |
          APP="${{ env.APP_NAME }}.app"

          # Create bundle dirs
          mkdir -p "$APP/Contents/MacOS" "$APP/Contents/Resources"

          # Merge slices into one universal binary and make executable
          lipo \
            slice-x86_64/${{ env.BINARY_NAME }} \
            slice-arm64/${{ env.BINARY_NAME }} \
            -create -output "$APP/Contents/MacOS/${{ env.BINARY_NAME }}"
          chmod +x "$APP/Contents/MacOS/${{ env.BINARY_NAME }}"

          # Copy your icon
          cp "${{ env.ICON_PATH }}" "$APP/Contents/Resources/${{ env.APP_NAME }}.icns"

          # Generate Info.plist
          cat > "$APP/Contents/Info.plist" <<EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN"
           "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
            <dict>
              <key>CFBundleName</key>
              <string>${{ env.APP_NAME }}</string>
              <key>CFBundleDisplayName</key>
              <string>${{ env.APP_NAME }}</string>
              <key>CFBundleIdentifier</key>
              <string>${{ env.BUNDLE_ID }}</string>
              <key>CFBundleVersion</key>
              <string>${{ env.VERSION }}</string>
              <key>CFBundleExecutable</key>
              <string>${{ env.BINARY_NAME }}</string>
              <key>CFBundlePackageType</key>
              <string>APPL</string>
              <key>CFBundleIconFile</key>
              <string>${{ env.APP_NAME }}.icns</string>
              <key>LSMinimumSystemVersion</key>
              <string>10.12.0</string>
            </dict>
          </plist>
          EOF

      # 4. Codesign
      - name: Codesign .app
        run: |
          APP="${{ env.APP_NAME }}.app"
          # Remove any stray xattrs
          xattr -rc "$APP"
          # Sign with runtime enforcement
          codesign --force --timestamp --options runtime \
            --sign "${{ secrets.DEV_IDENTITY_NAME }}" "$APP"

      # 5. Package into a DMG
      - name: Create DMG
        run: |
          mkdir dmg-staging
          cp -R "${{ env.APP_NAME }}.app" dmg-staging/
          ln -s /Applications dmg-staging/Applications
          hdiutil create \
            -volname "${{ env.APP_NAME }}" \
            -srcfolder dmg-staging \
            -ov -format UDZO \
            "${{ env.APP_NAME }}-${{ env.VERSION }}-macos-universal.dmg"

      # 6. Notarize
      - name: Notarize DMG
        run: |
          xcrun notarytool submit \
            "${{ env.APP_NAME }}-${{ env.VERSION }}-macos-universal.dmg" \
            --apple-id "${{ secrets.NOTARIZE_APPLE_ID }}" \
            --password "${{ secrets.NOTARIZE_APP_SPECIFIC_PASS }}" \
            --team-id "${{ secrets.NOTARIZE_TEAM_ID }}" \
            --wait --verbose

      - name: Staple ticket into DMG
        run: |
          xcrun stapler staple "${{ env.APP_NAME }}-${{ env.VERSION }}-macos-universal.dmg"

      # 7. Upload the final artifact
      - name: Upload notarized DMG
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APP_NAME }}-${{ env.VERSION }}-macos-universal.dmg
          path: ${{ env.APP_NAME }}-${{ env.VERSION }}-macos-universal.dmg