name: Rust Cross-Platform Builds

on:
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to build'
        required: false
        default: '1.0.0'

env:
  BINARY_NAME: idevice_pair
  APP_NAME: iDevicePair
  VERSION: ${{ github.event.inputs.version }}
  ICON_PNG: icon.png
  CARGO_TERM_COLOR: always

jobs:
  # 1) Build AppImage for Linux
  build-appimage:
    name: Build & Upload AppImage (Linux ${{ matrix.arch }})
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        include:
          - arch: x86_64
            runner: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            toolfile: appimagetool-x86_64.AppImage
          - arch: aarch64
            runner: ubuntu-22.04-arm
            target: aarch64-unknown-linux-gnu
            toolfile: appimagetool-aarch64.AppImage

    steps:
      - uses: actions/checkout@v3

      - name: Cache Cargo registry & build artifacts
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/index
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-${{ matrix.target }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-
            ${{ runner.os }}-cargo-

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: rustfmt, clippy
          target: ${{ matrix.target }}

      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libglib2.0-dev \
            libatk1.0-dev \
            libgtk-3-dev \
            pkg-config \
            libfuse2 \
            appstream \
            usbmuxd

      - name: Build native binary
        run: |
          cargo build --release --bin ${{ env.BINARY_NAME }} --target ${{ matrix.target }}

      - name: Download appimagetool
        run: |
          wget -c https://github.com/AppImage/AppImageKit/releases/download/continuous/${{ matrix.toolfile }} \
            -O appimagetool.AppImage
          chmod +x appimagetool.AppImage

      - name: Prepare AppDir
        run: |
          mkdir -p AppDir/usr/bin AppDir/usr/lib AppDir/usr/share/icons/hicolor/256x256/apps AppDir/etc/udev/rules.d
          cp target/${{ matrix.target }}/release/${{ env.BINARY_NAME }} AppDir/usr/bin/
          cp $(which usbmuxd) AppDir/usr/bin/
          sudo cp /lib/udev/rules.d/39-usbmuxd.rules AppDir/etc/udev/rules.d/
          ICON_NAME=${ICON_PNG##*/}; BASENAME=${ICON_NAME%.*}
          cp ${{ env.ICON_PNG }} AppDir/${BASENAME}.png
          cp ${{ env.ICON_PNG }} AppDir/usr/share/icons/hicolor/256x256/apps/${BASENAME}.png
          cat > AppDir/${{ env.BINARY_NAME }}.desktop <<EOF
          [Desktop Entry]
          Type=Application
          Name=${{ env.APP_NAME }}
          Exec=${{ env.BINARY_NAME }} %u
          Icon=${BASENAME}
          Categories=Utility;
          EOF
          ln -s usr/bin/${{ env.BINARY_NAME }} AppDir/AppRun
          chmod +x AppDir/AppRun

      - name: Build AppImage
        run: |
          FILENAME="${{ env.APP_NAME }}-${{ env.VERSION }}-linux-${{ matrix.arch }}.AppImage"
          ./appimagetool.AppImage AppDir "$FILENAME"

      - name: Upload AppImage
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APP_NAME }}-${{ env.VERSION }}-linux-${{ matrix.arch }}.AppImage
          path: ${{ env.APP_NAME }}-${{ env.VERSION }}-linux-${{ matrix.arch }}.AppImage

  # 2) Build macOS slices
  macos-universal:
    name: Build macOS slices
    runs-on: macos-latest
    strategy:
      matrix:
        include:
          - arch: x86_64
            target: x86_64-apple-darwin
          - arch: arm64
            target: aarch64-apple-darwin

    steps:
      - uses: actions/checkout@v3

      - name: Set up Rust for ${{ matrix.arch }}
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: rustfmt, clippy
          target: ${{ matrix.target }}

      - name: Build ${{ matrix.arch }} slice
        run: |
          cargo build --release \
            --bin ${{ env.BINARY_NAME }} \
            --target ${{ matrix.target }}

      - name: Upload slice ${{ matrix.arch }}
        uses: actions/upload-artifact@v4
        with:
          name: slice-${{ matrix.arch }}
          path: target/${{ matrix.target }}/release/${{ env.BINARY_NAME }}

  macos-bundle:
    name: Create, Sign, Notarize & Upload Universal DMG
    needs: macos-universal
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v3

      - name: Download x86_64 slice
        uses: actions/download-artifact@v4
        with:
          name: slice-x86_64
          path: slice-x86_64

      - name: Download arm64 slice
        uses: actions/download-artifact@v4
        with:
          name: slice-arm64
          path: slice-arm64

      - name: Import Developer ID certificate
        uses: apple-actions/import-codesign-certs@v5
        with:
          p12-file-base64: ${{ secrets.DEV_ID_P12_BASE64 }}
          p12-password:    ${{ secrets.DEV_ID_P12_PASSWORD }}

      - name: Build Universal .app Bundle
        run: |
          APP="${{ env.APP_NAME }}.app"
          mkdir -p "$APP/Contents/MacOS" "$APP/Contents/Resources"
          lipo slice-x86_64/${{ env.BINARY_NAME }} slice-arm64/${{ env.BINARY_NAME }} \
            -create -output "$APP/Contents/MacOS/${{ env.APP_NAME }}"
          # generate Info.plist and icon as beforeâ€¦

      - name: Codesign .app
        run: |
          APP="${{ env.APP_NAME }}.app"
          xattr -rc "$APP"
          codesign --force --timestamp --options runtime \
            --sign "${{ secrets.DEV_IDENTITY_NAME }}" "$APP"

      - name: Create DMG
        run: |
          mkdir dmg-staging
          cp -R "${{ env.APP_NAME }}.app" dmg-staging/
          ln -s /Applications dmg-staging/Applications
          hdiutil create \
            -volname "${{ env.APP_NAME }}" \
            -srcfolder dmg-staging \
            -ov -format UDZO \
            "${{ env.APP_NAME }}-${{ env.VERSION }}-macos-universal.dmg"

      - name: Notarize DMG
        run: |
          xcrun notarytool submit "${{ env.APP_NAME }}-${{ env.VERSION }}-macos-universal.dmg" \
            --apple-id "${{ secrets.NOTARIZE_APPLE_ID }}" \
            --password "${{ secrets.NOTARIZE_APP_SPECIFIC_PASS }}" \
            --team-id "${{ secrets.NOTARIZE_TEAM_ID }}" \
            --wait --verbose

      - name: Staple ticket into DMG
        run: |
          xcrun stapler staple "${{ env.APP_NAME }}-${{ env.VERSION }}-macos-universal.dmg"

      - name: Upload notarized DMG
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APP_NAME }}-${{ env.VERSION }}-macos-universal.dmg
          path: ${{ env.APP_NAME }}-${{ env.VERSION }}-macos-universal.dmg


  # 5) Build & Upload Windows .exe
  build-windows:
    name: Build & Upload Windows .exe
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
      - name: Cache Cargo registry & build artifacts
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/index
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-x86_64-pc-windows-msvc
          restore-keys: |
            ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-
            ${{ runner.os }}-cargo-
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: rustfmt, clippy
          target: x86_64-pc-windows-msvc
      - name: Build and Rename Executable
        shell: bash
        run: |
          cargo build --release --bin ${{ env.BINARY_NAME }} --target x86_64-pc-windows-msvc
          mkdir -p release
          cp target/x86_64-pc-windows-msvc/release/${{ env.BINARY_NAME }}.exe \
             release/${{ env.APP_NAME }}-${{ env.VERSION }}-windows-x86_64.exe
      - name: Upload Windows .exe
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APP_NAME }}-${{ env.VERSION }}-windows-x86_64.exe
          path: release/${{ env.APP_NAME }}-${{ env.VERSION }}-windows-x86_64.exe
